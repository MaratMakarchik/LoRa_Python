# handlers.py
from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove

from python.bdrv.database import SensorDatabase
from app.keyboards import get_amount_keyboard

router = Router()
db = SensorDatabase()

class SensorStates(StatesGroup):
    waiting_for_amount = State()

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Ç 1 –¥–æ 100):",
        reply_markup=get_amount_keyboard()
    )
    await state.set_state(SensorStates.waiting_for_amount)

@router.message(SensorStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if 1 <= amount <= 100:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            measurements = db.get_measurements(limit=amount)
            
            if not measurements:
                await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=ReplyKeyboardRemove())
                await state.clear()
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            response = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:"]
            for i, meas in enumerate(measurements, 1):
                response.append(
                    f"{i}. üìÖ {meas[5]} | "
                    f"üìç {meas[6]} | "
                    f"üå° {meas[2]}¬∞C | "
                    f"CO‚ÇÇ {meas[3]}ppm | "
                    f"üîã {meas[4]}V"
                )

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 10 –∑–∞–ø–∏—Å–µ–π
            for i in range(0, len(response), 10):
                await message.answer("\n".join(response[i:i+10]), reply_markup=ReplyKeyboardRemove())

            await state.clear()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")